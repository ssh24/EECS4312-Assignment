% Isolette System Specification

Isolette[delta: posreal]: THEORY
 BEGIN
  % importing Time specification
  IMPORTING Time[delta]

  % variable
  i: VAR DTIME

  % types
  CURRENT_TEMPERATURE: TYPE = {n: real | n >= 68.0 AND n <= 105.0}
        CONTAINING 68.0

  DESIRED_LOW_TEMP: TYPE = {n: integer | n >= 97 AND n <= 99} CONTAINING 97

  DESIRED_HIGH_TEMP: TYPE = {n: integer | n >= 98 AND n <= 100} CONTAINING 98

  ALARM_LOW_TEMP: TYPE = {n: integer | n >= 93 AND n <= 98} CONTAINING 94

  ALARM_HIGH_TEMP: TYPE = {n: integer | n >= 99 AND n <= 103} CONTAINING 100

  STATUS: TYPE = {valid, invalid}

  SWITCH: TYPE = {on, off}

  HEAT_CONTROL: TYPE = {on, off}

  DISPLAYED_TEMPERATURE: TYPE =
        {n: integer | n = 0 OR n >= 68 AND n <= 105} CONTAINING 68

  MESSAGES: TYPE =
  {ok, cooling_down, warming_up, too_cool_alarm, too_hot_alarm,
   system_error}

  ALARM: TYPE = {off, on}

  MODES: TYPE = {off, init, normal, fail}

  % monitored variables
  m_tm: [DTIME -> CURRENT_TEMPERATURE]

  m_dl: [DTIME -> DESIRED_LOW_TEMP]

  m_dh: [DTIME -> DESIRED_HIGH_TEMP]

  m_al: [DTIME -> ALARM_LOW_TEMP]

  m_ah: [DTIME -> ALARM_HIGH_TEMP]

  m_st: [DTIME -> STATUS]

  m_sw: [DTIME -> SWITCH]

  % controlled variables
  c_hc: [DTIME -> HEAT_CONTROL]

  c_td: [DTIME -> DISPLAYED_TEMPERATURE]

  c_ms: [DTIME -> MESSAGES]

  c_al: [DTIME -> ALARM]

  c_md: [DTIME -> MODES]

  alarm(i: DTIME): bool = c_al(i) = on

  % —————————————— FUNCTION TABLES —————————————— %
  
  % mode function table: c_md
  mode_ft(i): bool =
      COND i = 0 -> c_md(i) = off,
           i > 0 ->
             COND m_sw(i) = off -> c_md(i) = off,
                  NOT (m_sw(i) = off) ->
                    COND c_md(i - 1) = off -> c_md(i) = init,
                         c_md(i - 1) = init ->
                           COND      m_st(i) = valid AND m_dl(i) <= m_tm(i)
                                 AND m_tm(i) <= m_dh(i)
                                 AND m_al(i) < m_dl(i) AND m_dl(i) < m_dh(i)
                                 AND m_dh(i) < m_ah(i)
                                  -> c_md(i) = normal,
                                NOT (     m_st(i) = valid
                                      AND m_dl(i) <= m_tm(i)
                                      AND m_tm(i) <= m_dh(i)
                                      AND m_al(i) < m_dl(i)
                                      AND m_dl(i) < m_dh(i)
                                      AND m_dh(i) < m_ah(i))
                                  -> c_md(i) = c_md(i - 1)
                           ENDCOND,
                         c_md(i - 1) = normal ->
                           COND m_st(i) = invalid -> c_md(i) = fail,
                                NOT (m_st(i) = invalid) ->
                                  c_md(i) = c_md(i - 1)
                           ENDCOND,
                         c_md(i - 1) = fail ->
                           COND NOT (m_st(i) = invalid) ->
                                  c_md(i) = normal,
                                m_st(i) = invalid -> c_md(i) = c_md(i - 1)
                           ENDCOND
                    ENDCOND
             ENDCOND
      ENDCOND

  % heat control function table: c_hc    
  heat_control_ft(i): bool =
      COND i = 0 -> c_hc(i) = off,
           i > 0 ->
             COND m_sw(i) = off -> c_hc(i) = off,
                  NOT (m_sw(i) = off) ->
                    COND m_dl(i) < m_dh(i) ->
                           COND m_tm(i) < m_dl(i) -> c_hc(i) = on,
                                m_dl(i) <= m_tm(i) AND m_tm(i) <= m_dh(i)
                                  -> c_hc(i) = c_hc(i - 1),
                                m_tm(i) > m_dh(i) -> c_hc(i) = off
                           ENDCOND,
                         NOT (m_dl(i) < m_dh(i)) -> c_hc(i) = c_hc(i - 1)
                    ENDCOND
             ENDCOND
      ENDCOND

  % temperature display function table: c_td
  temperature_display_ft(i): bool =
      COND i = 0 -> c_td(i) = 0,
           i > 0 ->
             COND c_md(i - 1) = off OR c_md(i - 1) = fail -> c_td(i) = 0,
                  c_md(i - 1) = init OR c_md(i - 1) = normal ->
                    c_td(i) = floor(m_tm(i) + 0.5)
             ENDCOND
      ENDCOND

  % alarm control function table: c_al    
  alarm_ft(i): bool =
      COND i = 0 -> c_al(i) = off,
           i > 0 ->
             COND c_md(i - 1) = off OR c_md(i - 1) = init -> c_al(i) = off,
                  c_md(i - 1) = normal OR c_md(i - 1) = fail ->
                    COND ((m_al(i) <= m_tm(i) AND m_tm(i) < m_al(i) + 0.5)
                           OR
                           (m_ah(i) - 0.5 <= m_tm(i) AND
                             m_tm(i) <= m_ah(i)))
                           -> c_al(i) = c_al(i - 1),
                         NOT ((m_al(i) <= m_tm(i) AND
                                m_tm(i) < m_al(i) + 0.5)
                               OR
                               (m_ah(i) - 0.5 <= m_tm(i) AND
                                 m_tm(i) <= m_ah(i)))
                           ->
                           COND m_tm(i) > m_ah(i) OR
                                 m_tm(i) < m_al(i) OR m_st(i) = invalid
                                  -> c_al(i) = on,
                                NOT (m_tm(i) > m_ah(i)
                                     OR
                                     m_tm(i) < m_al(i)
                                     OR
                                     m_st(i) = invalid)
                                  ->
                                  COND c_al(i - 1) = off
                                       ->
                                       c_al(i) = c_al(i - 1),
                                       NOT (c_al(i - 1) = off)
                                       ->
                                       COND
                                       held_for(alarm, 10)(i - 1)
                                       ->
                                       c_al(i) = off,
                                       NOT (held_for(alarm, 10)(i - 1))
                                       ->
                                       COND
                                       m_sw(i) = off
                                       ->
                                       c_al(i) = off,
                                       NOT (m_sw(i) = off)
                                       ->
                                       c_al(i) = on
                                       ENDCOND
                                       ENDCOND
                                  ENDCOND
                           ENDCOND
                    ENDCOND
             ENDCOND
      ENDCOND
  
  % displayed message functional table: c_ms
  message_ft(i): bool =
      IF m_st(i) = invalid THEN c_ms(i) = system_error
      ELSIF m_tm(i) > m_ah(i) THEN c_ms(i) = too_hot_alarm
      ELSIF m_tm(i) < m_al(i) THEN c_ms(i) = too_cool_alarm
      ELSIF m_al(i) < m_tm(i) < m_dl(i) THEN c_ms(i) = warming_up
      ELSIF m_dh(i) < m_tm(i) < m_ah(i) THEN c_ms(i) = cooling_down
      ELSE c_ms(i) = ok
      ENDIF
  
  % specification of all function tables
  specification(i): bool =
           mode_ft(i) AND heat_control_ft(i) AND temperature_display_ft(i)
       AND alarm_ft(i) AND message_ft(i)

  % —————————————— INVARIANTS —————————————— %
  
  % inv1: All modes are in the set of { off, init, normal, fail }
  invariant1(i): bool =
      c_md(i) = off OR c_md(i) = init OR c_md(i) = normal OR c_md(i) = fail

  % inv2: All messages are in the set of { system_error, too_hot_alarm, too_cool_alarm, warming_up, cooling_down, ok }
  invariant2(i): bool =
          c_ms(i) = system_error OR c_ms(i) = too_hot_alarm
       OR c_ms(i) = too_cool_alarm OR c_ms(i) = warming_up
       OR c_ms(i) = cooling_down OR c_ms(i) = ok
   
  % inv3: The heat control cannot be on and off at the same time     
  invariant3(i): bool = NOT (c_hc(i) = on AND c_hc(i) = off)

  % inv4: The alarm cannot be on and off at the same time
  invariant4(i): bool = NOT (c_al(i) = on AND c_al(i) = off)

  % all the invariants
  invariant(i): bool =
      invariant1(i) AND invariant2(i) AND invariant3(i) AND invariant4(i)
  
  % specficiation should satisfy the invariant
  spec_inv_holds: CONJECTURE
    FORALL (i: DTIME): specification(i) IMPLIES invariant(i)

  % —————————————— USECASES —————————————— %
  
  % uc1: If the switch is on and the status is invalid then the message displayed should say "system_error"
  usecase1: CONJECTURE
    m_sw(2) = on AND m_st(2) = invalid AND message_ft(2) IMPLIES
     c_ms(2) = system_error

  % uc2: If the switch is on at time 1 and the current temperature is outside the temperature range at time 1 THEN the mode at time 0 is off and mode at time 1 is init
  usecase2: CONJECTURE
         m_sw(1) = on AND m_tm(1) = 74 AND m_al(1) = 97 AND m_ah(1) = 103
     AND m_dl(1) = 98 AND m_dh(1) = 100 AND m_st(1) = valid AND mode_ft(0)
     AND mode_ft(1)
     IMPLIES c_md(0) = off AND c_md(1) = init

  % uc3: If the switch is on and current temperature is below the desired range the heat control should be on
  usecase3: CONJECTURE
         m_sw(2) = on AND m_tm(2) = 96 AND m_al(2) = 96 AND m_ah(2) = 103
     AND m_dl(2) = 98 AND m_dh(2) = 100 AND heat_control_ft(2)
     IMPLIES c_hc(2) = on

  % uc4: If the mode is normal and the current temperature is below the alarm temperature then the alarm should be on and the displayed message should say "too_cool_alarm"
  usecase4: CONJECTURE
         c_md(2) = normal AND m_sw(3) = on AND m_tm(3) = 90 AND m_al(3) = 93
     AND m_ah(3) = 103 AND NOT (m_st(3) = invalid) AND alarm_ft(3)
     AND message_ft(3) AND mode_ft(3)
     IMPLIES c_al(3) = on AND c_ms(3) = too_cool_alarm AND c_md(3) = c_md(2)

  % uc5: If the mode is normal and the current temperature is 98, the displayed temperature shown to the nurse should be 98
  usecase5: CONJECTURE
    c_md(2) = normal AND m_tm(3) = 98 AND temperature_display_ft(3) IMPLIES
     c_td(3) = 98
 END Isolette
